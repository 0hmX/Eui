[
	{
		"music-description": "Starts with a thoughtful, slightly mysterious electronic synth track. A low, steady beat.",
		"speech": "How does code even work?",
		"animation-description": "The word 'code' in a monospace font appears center-screen. A white cursor blinks at the end of the word. After a second, a large, clean, white question mark slowly fades in next to it. The entire scene is on a black background.",
		"duration": "5s"
	},
	{
		"music-description": "The beat becomes slightly more pronounced and confident.",
		"speech": "It begins with a parser.",
		"animation-description": "The question mark and the word 'code' smoothly transform into the single word 'PARSER' in a bold, sans-serif font. The transformation animation should take about 2 seconds, and the word holds for the remaining 3 seconds.",
		"duration": "5s"
	},
	{
		"music-description": "Music continues its steady, focused rhythm.",
		"speech": "Let's explore recursive descent parsers.",
		"animation-description": "The word 'PARSER' moves to the top of the screen. A straight white arrow is drawn downwards from its center. As the arrow is drawn, the words 'Recursive Descent' are written out by an animation at the arrow's tip.",
		"duration": "5s"
	},
	{
		"music-description": "A new synth layer is added, adding a sense of building or construction.",
		"speech": "Think: one function per rule.",
		"animation-description": "The screen clears. On the left, a rectangle appears with the text 'Grammar Rule' inside. On the right, another rectangle appears with 'Parser Function'. A horizontal, double-headed arrow is drawn connecting the two boxes.",
		"duration": "5s"
	},
	{
		"music-description": "Music holds steady, maintaining a focused and educational tone.",
		"speech": "For a grammar rule like this...",
		"animation-description": "The previous elements fade out. In the center of the screen, the text 'E → T '+' E' is written out character by character. The text should be large and clear.",
		"duration": "5s"
	},
	{
		"music-description": "A subtle 'whoosh' sound effect as the animation happens.",
		"speech": "...a `parse_E` function is made.",
		"animation-description": "The grammar rule 'E → T '+' E' transforms into a simple Python function signature: 'def parse_E():'. The 'E' from the rule should smoothly morph into the 'parse_E' part of the function.",
		"duration": "5s"
	},
	{
		"music-description": "A soft 'typing' sound effect syncs with the animation.",
		"speech": "First, it calls `parse_T`.",
		"animation-description": "Below the 'def parse_E():' line, a new line of code is typed out: '    parse_T()'. The text animates as if being typed on a keyboard.",
		"duration": "5s"
	},
	{
		"music-description": "A subtle 'ping' or 'highlight' sound effect.",
		"speech": "Then, it looks for '+' symbol.",
		"animation-description": "Another line of code is typed out below the previous one: '    if see('+'):'. As it finishes typing, the plus symbol inside the parentheses '('+')' glows with a soft, white light for a moment.",
		"duration": "5s"
	},
	{
		"music-description": "Music swells slightly to build tension for the reveal.",
		"speech": "And then... it calls itself.",
		"animation-description": "A final line of code is typed inside the if-statement: '        parse_E()'. Once typed, a curved arrow animates, starting from this new 'parse_E()' call and looping back up to the function name in 'def parse_E():', creating a visual recursion loop.",
		"duration": "5s"
	},
	{
		"music-description": "Music cuts for a beat, replaced by a warning chime, then resumes with a more dramatic tone.",
		"speech": "Just don't give it left-recursion.",
		"animation-description": "The screen briefly flashes red. All previous code disappears. New text appears: 'E → E + T'. A small, yellow warning triangle with an exclamation mark fades in next to it. A tight, curved arrow loops from the first 'E' back to itself.",
		"duration": "5s"
	},
	{
		"music-description": "The music becomes resolved, positive, and conclusive.",
		"speech": "It's an elegant, powerful technique.",
		"animation-description": "The warning scene fades out. A simple, symmetrical tree structure is drawn line by line from a single root node at the top, branching downwards twice. The animation is clean and satisfying.",
		"duration": "5s"
	},
	{
		"music-description": "The track hits its final, confident chord and fades out.",
		"speech": "The backbone of many compilers.",
		"animation-description": "The parse tree fades away. The word 'Compilers' appears on the left, and a green checkmark animates next to it. Then, the word 'Interpreters' appears on the right, and another green checkmark animates next to it.",
		"duration": "5s"
	}
]